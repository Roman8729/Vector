#include <iostream> // Подключение библиотеки для ввода-вывода данных
#include <stdexcept> // Подключение библиотеки для обработки исключений

class Vector { // Объявление класса Vector
    int* data; // Указатель на массив int, который будет использоваться для хранения данных вектора
    int size; // Число элементов в векторе
    int state; // Переменная состояния, которая будет использоваться для хранения кода ошибки
    static int count; // Статическая переменная для подсчета числа объектов данного типа

public: // Объявление публичных членов класса
    Vector() : size(1), state(0) { // Конструктор без параметров
        data = new int[size]; // Выделение памяти под один элемент
        data[0] = 0; // Инициализация этого элемента нулем
        count++; // Увеличение счетчика объектов
    }

    Vector(int size) : size(size), state(0) { // Конструктор с одним параметром
        data = new int[size]; // Выделение памяти под заданное число элементов
        for (int i = 0; i < size; i++) { // Цикл по всем элементам
            data[i] = i; // Инициализация i-го элемента номером в массиве
        }
        count++; // Увеличение счетчика объектов
    }

    Vector(int size, int init) : size(size), state(0) { // Конструктор с двумя параметрами
        data = new int[size]; // Выделение памяти под заданное число элементов
        for (int i = 0; i < size; i++) { // Цикл по всем элементам
            data[i] = init; // Инициализация всех элементов вторым аргументом
        }
        count++; // Увеличение счетчика объектов
    }

    ~Vector() { // Деструктор
        delete[] data; // Освобождение памяти
    }

    void set(int index, int value = 0) { // Функция, которая присваивает элементу массива некоторое значение
        if (index < 0 || index >= size) { // Проверка на выход за пределы массива
            state = -1; // Установка кода ошибки
            throw std::out_of_range("Index out of range"); // Генерация исключения
        }
        data[index] = value; // Присваивание значения элементу
    }

    int get(int index) { // Функция, которая получает некоторый элемент массива
        if (index < 0 || index >= size) { // Проверка на выход за пределы массива
            state = -1; // Установка кода ошибки
            throw std::out_of_range("Index out of range"); // Генерация исключения
        }
        return data[index]; // Возврат значения элемента
    }

    void print() { // Функция печати
        for (int i = 0; i < size; i++) { // Цикл по всем элементам
            std::cout << data[i] << " "; // Вывод значения каждого элемента
        }
        std::cout << std::endl; // Перевод строки после вывода всех элементов
    }

    Vector operator+(const Vector& other) { // Оператор сложения
        if (size != other.size) { // Проверка на равенство размеров векторов
            throw std::invalid_argument("Vectors must be the same size"); // Генерация исключения, если размеры не равны
        }
        Vector result(size); // Создание результата
        for (int i = 0; i < size; i++) { // Цикл по всем элементам
            result.data[i] = data[i] + other.data[i]; // Сложение соответствующих элементов векторов
        }
        return result; // Возврат результата
    }

    Vector operator*(int scalar) { // Оператор умножения
        Vector result(size); // Создание результата
        for (int i = 0; i < size; i++) { // Цикл по всем элементам
            result.data[i] = data[i] * scalar; // Умножение каждого элемента на скаляр
        }
        return result; // Возврат результата
    }

    Vector operator-(const Vector& other) { // Оператор вычитания
        if (size != other.size) { // Проверка на равенство размеров векторов
            throw std::invalid_argument("Vectors must be the same size"); // Генерация исключения, если размеры не равны
        }
        Vector result(size); // Создание результата
        for (int i = 0; i < size; i++) { // Цикл по всем элементам
            result.data[i] = data[i] - other.data[i]; // Вычитание соответствующих элементов векторов
        }
        return result; // Возврат результата
    }

    bool operator>(const Vector& other) { // Оператор больше
        if (size != other.size) { // Проверка на равенство размеров векторов
            throw std::invalid_argument("Vectors must be the same size"); // Генерация исключения, если размеры не равны
        }
        for (int i = 0; i < size; i++) { // Цикл по всем элементам
            if (data[i] <= other.data[i]) { // Если текущий элемент меньше или равен соответствующему элементу другого вектора
                return false; // Возврат false
            }
        }
        return true; // Возврат true, если все элементы больше соответствующих элементов другого вектора
    }

    bool operator<(const Vector& other) { // Оператор меньше
        return !(*this > other); // Возврат результата оператора больше с применением отрицания
    }

    bool operator==(const Vector& other) { // Оператор равно
        if (size != other.size) { // Проверка на равенство размеров векторов
            return false; // Возврат false, если размеры не равны
        }
        for (int i = 0; i < size; i++) { // Цикл по всем элементам
            if (data[i] != other.data[i]) { // Если текущий элемент не равен соответствующему элементу другого вектора
                return false; // Возврат false
            }
        }
        return true; // Возврат true, если все элементы равны соответствующим элементам другого вектора
    }

    static int getCount() { // Статический метод для получения числа объектов данного типа
        return count; // Возврат значения счетчика объектов
    }
};

int Vector::count = 0; // Инициализация статической переменной count


    Vector operator*(int scalar) { // Оператор умножения на скаляр
        Vector result(size); // Создание результата
        for (int i = 0; i < size; i++) { // Цикл по элементам массива
            result.data[i] = data[i] * scalar; // Умножение элемента на скаляр
        }
        return result; //
